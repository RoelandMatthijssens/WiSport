<%= simple_form_for(@image, html: {class: 'form-horizontal', multipart: true}) do |f| %>

  <div class="form-inputs">

		<%= f.input "file", as: :file %>
  </div>

  <div class="form-actions">
    <%= f.submit %>
  </div>
<% end %>
<div>
  <div id="holder">
	<div class="loading hidden"></div>
  </div> 
  <p id="upload" class="hidden"><label>Drag & drop not supported, but you can still upload via this input field:<br><input type="file"></label></p>
  <p id="filereader">File API & FileReader API not supported</p>
  <p id="formdata">XHR2's FormData is not supported</p>
  <p id="progress">XHR2's upload progress isn't supported</p>
  <p>Drag an image from your desktop on to the drop zone above to see the browser both render the preview, but also upload automatically to this server.</p>
</div>

<script>
var holder = document.getElementById('holder'),
    tests = {
      filereader: typeof FileReader != 'undefined',
      dnd: 'draggable' in document.createElement('span'),
      formdata: !!window.FormData,
      progress: "upload" in new XMLHttpRequest
    }, 
    support = {
      filereader: document.getElementById('filereader'),
      formdata: document.getElementById('formdata'),
      progress: document.getElementById('progress')
    },
    acceptedTypes = {
      'image/png': true,
      'image/jpeg': true,
      'image/gif': true
    },
    progress = document.getElementById('uploadprogress'),
    fileupload = document.getElementById('upload');

"filereader formdata progress".split(' ').forEach(function (api) {
  if (tests[api] === false) {
    support[api].className = 'fail';
  } else {
    // FFS. I could have done el.hidden = true, but IE doesn't support
    // hidden, so I tried to create a polyfill that would extend the
    // Element.prototype, but then IE10 doesn't even give me access
    // to the Element object. Brilliant.
    support[api].className = 'hidden';
  }
});

function previewfile(file, id) {
  if (tests.filereader === true && acceptedTypes[file.type] === true) {
    var reader = new FileReader();
    reader.onload = function (event) {
			$("#holder").append('<div><div class="loading" id='+id+' ><img src="'+event.target.result+'" width=200></div></div>');
    };

    reader.readAsDataURL(file);
  }  else {
    holder.innerHTML += '<p>Uploaded ' + file.name + ' ' + (file.fileSize ? (file.fileSize/1024|0) + 'K' : '');
    console.log(file);
  }
}

function readfiles(files) {
    //debugger;
		id_extra = 1000000000
    var formData = tests.formdata ? new FormData() : null;
    for (var i = 0; i < files.length; i++) {
			var formData = new FormData();
			var id = new Date().getTime();
			id -= id_extra
			id_extra += 1000000000
      if (tests.formdata) formData.append('image[file]', files[i]);
      previewfile(files[i], id);
			if (tests.formdata){
				post_image(formData, id);
			}
    }
}

function post_image(formData, id) {
	$.ajax({
	  type: 'POST',
	  url: '/images.json',
	  data: formData,
		processData: false,
	  contentType: false,
	  success: function(data){
		    $("#"+id).removeClass("loading");
		  }
	});
}

if (tests.dnd) { 
  holder.ondragover = function () { this.className = 'hover'; return false; };
  holder.ondragend = function () { this.className = ''; return false; };
  holder.ondrop = function (e) {
    this.className = '';
    e.preventDefault();
    readfiles(e.dataTransfer.files);
  }
} else {
  fileupload.className = 'hidden';
  fileupload.querySelector('input').onchange = function () {
    readfiles(this.files);
  };
}
</script>