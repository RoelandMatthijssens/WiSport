
<%= f.input :description, input_html: {:rows => 5} %>
<%= f.simple_fields_for :videos do |builder| %>
  <%= render 'video_fields', f: builder %>
<% end %>
<%= link_to_add_fields "Add Video", f, :videos %>
<div id="pictures" class="hidden">  
	<% @exercise.information.images.each do |img| %>
		<%= hidden_field_tag 'exercise[information_attributes][image_ids][]', img.id %>
	<% end %>
</div>
<div>
	
  <div class="form-inputs">

		<%= f.input "file", as: :file, :wrapper_html => { :id => 'upload' }, label: "Add a file" %>
  </div>
  <div id="holder">
	<div class="loading_white hidden"></div>
		<p>Drop Pictures here! </p>
		<p id="filereader">Drag and drop is not supported</p>
	  <p id="formdata">Drag and dropis not supported</p>
		<% @exercise.information.images.each do |img| %>
			<%= image_tag img.large_thumbnail, width: "200" %>
		<% end %>
  </div> 
</div>

<script>
var holder = document.getElementById('holder'),
    tests = {
      filereader: typeof FileReader != 'undefined',
      dnd: 'draggable' in document.createElement('span'),
      formdata: !!window.FormData
    }, 
    support = {
      filereader: document.getElementById('filereader'),
      formdata: document.getElementById('formdata')
    },
    acceptedTypes = {
      'image/png': true,
      'image/jpeg': true,
      'image/gif': true
    },
    fileupload = $('#upload');

"filereader formdata".split(' ').forEach(function (api) {
  if (tests[api] === false) {
    support[api].className = 'fail';
  } else {
    // FFS. I could have done el.hidden = true, but IE doesn't support
    // hidden, so I tried to create a polyfill that would extend the
    // Element.prototype, but then IE10 doesn't even give me access
    // to the Element object. Brilliant.
    support[api].className = 'hidden';
  }
});

function previewfile(file, id) {
  if (tests.filereader === true && acceptedTypes[file.type] === true) {
    var reader = new FileReader();
    reader.onload = function (event) {
			$("#holder").append('<div><div class="loading_white" id='+id+' ><img src="'+event.target.result+'" width=200></div></div>');
    };

    reader.readAsDataURL(file);
  }  else {
    holder.innerHTML += '<p>Uploaded ' + file.name + ' ' + (file.fileSize ? (file.fileSize/1024|0) + 'K' : '');
    console.log(file);
  }
}

function showlink(link){
	$("#holder").append('<div><div ><img src="'+link+'" width=200></div></div>');
}

function readfiles(files) {
    //debugger;
		id_extra = 1000000000
    var formData = tests.formdata ? new FormData() : null;
    for (var i = 0; i < files.length; i++) {
			var formData = new FormData();
			var id = new Date().getTime();
			id -= id_extra
			id_extra += 1000000000
      if (tests.formdata) formData.append('image[file]', files[i]);
      previewfile(files[i], id);
			if (tests.formdata){
				post_image(formData, id);
			}
    }
}
test = "";
function post_image(formData, id) {
	$.ajax({
	  type: 'POST',
	  url: '/images.json',
	  data: formData,
		processData: false,
	  contentType: false,
	  success: function(data){
		    $("#"+id).removeClass("loading_white");
				$("#pictures").append("<input class='hidden' id='exercise_information_attributes_image_ids' name='exercise[information_attributes][image_ids][]' type='hidden' value="+data["id"]+">")
		  }
	});
}


fileupload.find('input').change(function () {
	readfiles(this.files);
	$('#upload').replaceWith( $('#upload').clone( true ) );	
});
holder.ondragover = function () { this.className = 'hover'; return false; };
holder.ondragend = function () { this.className = ''; return false; };
holder.ondrop = function (e) {
  this.className = '';
  e.preventDefault();
  readfiles(e.dataTransfer.files);
}

</script>
